#!/bin/bash
set -euo pipefail
filepath=$1
root=$(cljs-root $filepath)

runner(){
cat <<EOF
(ns cljs-runner
  (:require [main :as main]
            [cljs.nodejs :as nodejs]))
(nodejs/enable-util-print!)
(defn run [& _]
  (apply main/-main (drop 2 (.-argv js/process))))
(set! *main-cli-fn* run)
EOF
}

dev(){
cat <<EOF
#!/usr/bin/env node
try { require('source-map-support').install(); } catch(e) {};
require("$root/out/goog/bootstrap/nodejs");
require("$root/out/dev.js");
require("$root/out/cljs_runner.js");
global.cljs_runner.run();
EOF
}

project() {
npm=$(cljs-deps $filepath :npm 2>/dev/null | tr -d '[]')
cat <<EOF
(defproject $(basename $filepath) "0.0.1"
  :dependencies [[cider/piggieback "0.3.6"] $(cljs-deps $filepath :lein 2>/dev/null)]
  :plugins [[lein-cljsbuild "1.1.7"]]
  :main repl
  :repl-options {:nrepl-middleware [cider.piggieback/wrap-cljs-repl]}
  :cljsbuild {:builds [{:id "dev"
                        :source-paths ["src"]
                        :compiler {:output-to "out/dev.js"
                                   :output-dir "out"
                                   :source-map true
                                   :optimizations :none
                                   :main "main"
                                   :pretty-print true
                                   :npm-deps {$npm}
                                   :install-deps true
                                   :target :nodejs}}
                       {:id "release"
                        :source-paths ["src"]
                        :compiler {:output-to "out-release/release.js"
                                   :source-map "out-release/release.js.map"
                                   :output-dir "out-release"
                                   :optimizations :simple
                                   :cache-analysis true
                                   :npm-deps {$npm}
                                   :install-deps true
                                   :target :nodejs}}]})
EOF
}

repl() {
cat <<EOF
(ns repl
  (:require [cider.piggieback :refer [cljs-repl]]
            [cljs.repl.node :refer [repl-env]]))
(defn start-node-repl
  []
  (cljs-repl (repl-env)
             :analyze-path "src"
             :output-dir "out-repl"
             :optimizations :none
             :cache-analysis true
             :source-map true))
EOF
}

shell() {
cat <<EOF
(ns shell
  (:require [clojure.string :as s]))
EOF
}

mkdir -p $root/src

runner > $root/src/cljs_runner.cljs.tmp
mv -f $root/src/cljs_runner.cljs.tmp $root/src/cljs_runner.cljs

repl > $root/src/repl.clj.tmp
mv -f $root/src/repl.clj.tmp $root/src/repl.clj

dev > $root/dev.js.tmp
mv -f $root/dev.js.tmp $root/dev.js

project > $root/project.clj.tmp
mv -f $root/project.clj.tmp $root/project.clj
