#!/bin/bash
set -e
filepath=$1
root=$(cljs-root $filepath)

run(){
cat <<EOF
require('source-map-support').install();
require("$root/out/goog/bootstrap/nodejs");
require("$root/out/dev.js");
require("$root/out/main.js");
global.main._main.apply(this, process.argv.slice(2));
EOF
}
project() {
cat <<EOF
(defproject $(basename $filepath) "0.0.1"
  :dependencies [[org.clojure/clojure "1.9.0-alpha10"]
                 [org.clojure/clojurescript "1.9.216"]
                 [org.clojure/core.async "0.2.385"]
                 [org.clojure/core.match "0.3.0-alpha4"]
                 [com.cemerick/piggieback "0.2.1"]
                 $(cljs-deps $filepath lein)
                ]
  :plugins [[lein-cljsbuild "1.1.3"]
            [lein-npm "0.6.2"]]
  :npm {:dependencies [[source-map-support "0.4.2"]
                       [fibers "1.0.13"]
                       $(cljs-deps $filepath npm)
                      ]}
  :main main
  :repl-options {:nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}
  :cljsbuild {:builds [{:source-paths ["src"]
                        :notify-command ["bash" "-c" "cljs-hash $(pwd)/$filepath >hash"]
                        :compiler {:output-to "out/dev.js"
                                   :output-dir "out"
                                   :source-map true
                                   :optimizations :none
                                   :pretty-print true
                                   :cache-analysis true
                                   :target :nodejs}}]})
EOF
}
main() {
cat <<EOF
(ns main
  (:require [cemerick.piggieback :refer [cljs-repl]]
            [cljs.repl.node :refer [repl-env]]))
(defn start-node-repl
  []
  (cljs-repl (repl-env)
             :analyze-path "src"
             :output-dir "out-repl"
             :optimizations :none
             :cache-analysis true
             :source-map true))
EOF
}

shell() {
cat <<EOF
(ns shell
  (:require-macros [cljs.core.async.macros :as csp])
  (:require [cljs.core.async :as csp]
            [clojure.string :as s]
            [cljs.core.match :refer-macros [match]]))
(def Fiber (js/require "fibers"))
(defn run-opts
  [cmd & {:keys [cb]}]
  (let [fiber (.-current Fiber)
        cmd (s/join " " (map str cmd))
        chan (csp/chan)]
    (.error js/console (str "run: " cmd))
    (doto (.spawn (js/require "child_process") "bash" #js ["-c" cmd])
      (-> .-stdout (.on "data"  #(csp/put! chan [:data (str %)])))
      (->          (.on "close" #(csp/put! chan [:exit %]))))
    (csp/go-loop [output ""]
      (match (csp/<! chan)
        [:data text] (do (dorun (map (or cb identity) (s/split-lines text)))
                         (recur (str output text)))
        [:exit code] (let [val {:exit code
                                :output (s/trim output)
                                :cmd cmd
                                :cwd (.cwd js/process)}]
                       (if (zero? code)
                         (.run fiber (:output val))
                         (.throwInto fiber val)))))
    (.yield Fiber)))
(defn run
  [& cmd]
  (run-opts cmd))
(defn run-cb
  [cb & cmd]
  (run-opts cmd :cb cb))
(defn run-fiber
  [f]
  (.run (Fiber f)))
EOF
}

if [ "$clean" = "true" ]; then
    echo cleaned >&2
    rm -rf "$root"
fi

if [ ! -d $root ]; then
    mkdir -p $root/src
    echo $filepath > $root/filepath

    shell > $root/src/shell.cljs.tmp
    mv -f $root/src/shell.cljs.tmp $root/src/shell.cljs

    main > $root/src/main.clj.tmp
    mv -f $root/src/main.clj.tmp $root/src/main.clj

    run > $root/run.js.tmp
    mv -f $root/run.js.tmp $root/run.js

    project > $root/project.clj.tmp
    mv -f $root/project.clj.tmp $root/project.clj

fi
