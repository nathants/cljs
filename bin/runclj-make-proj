#!/bin/bash
set -euo pipefail
filepath=$1
root=$(runclj-root $filepath)
piggieback=0.3.6
cljsbuild=1.1.7

dev(){
cat <<EOF
#!/usr/bin/env node
process.chdir(__dirname)
try { require('source-map-support').install(); } catch(e) {};
require("$root/out/goog/bootstrap/nodejs");
require("$root/out/dev.js");
require("$root/out/cljs_runner.js");
global.cljs_runner.run();
EOF
}

browser-project() {
cat <<EOF
(defproject $(basename $filepath) "0.0.1"
  :dependencies [[cider/piggieback "$piggieback"] $(runclj-deps $filepath :lein 2>/dev/null)]
  :plugins [[lein-cljsbuild "$cljsbuild"]]
  :main repl
  :repl-options {:nrepl-middleware [cider.piggieback/wrap-cljs-repl]}
  :cljsbuild {:builds [{:id "dev"
                        :source-paths ["src"]
                        :compiler {:output-to "out/dev.js"
                                   :output-dir "out"
                                   :source-map true
                                   :optimizations :none
                                   :pretty-print true}}
                       {:id "release"
                        :source-paths ["src"]
                        :compiler {:output-to "out-release/release.js"
                                   :source-map "out-release/release.js.map"
                                   :output-dir "out-release"
                                   :optimizations :advanced}}]})
EOF
}

server-project() {
npm=$(runclj-deps $filepath :npm 2>/dev/null | tr -d '[]')
ns=$(runclj-deps $filepath :ns)
cat <<EOF
(defproject $(basename $filepath) "0.0.1"
  :dependencies [[cider/piggieback "$piggieback"] $(runclj-deps $filepath :lein 2>/dev/null)]
  :plugins [[lein-cljsbuild "$cljsbuild"]]
  :main repl
  :repl-options {:nrepl-middleware [cider.piggieback/wrap-cljs-repl]}
  :cljsbuild {:builds [{:id "dev"
                        :source-paths ["src"]
                        :compiler {:output-to "out/dev.js"
                                   :output-dir "out"
                                   :source-map true
                                   :optimizations :none
                                   :main "$ns"
                                   :pretty-print true
                                   :npm-deps {$npm}
                                   :install-deps true
                                   :target :nodejs}}
                       {:id "release"
                        :source-paths ["src"]
                        :compiler {:output-to "out-release/release.js"
                                   :source-map "out-release/release.js.map"
                                   :output-dir "out-release"
                                   :optimizations :simple
                                   :npm-deps {$npm}
                                   :install-deps true
                                   :target :nodejs}}]})
EOF
}

repl() {
npm=$(runclj-deps $filepath :npm 2>/dev/null | tr -d '[]')
cat <<EOF
(ns repl
  (:require [cider.piggieback :refer [cljs-repl]]
            [cljs.repl.node :as node]
            [cljs.repl.browser :as browser]))
(defn start-node-repl
  []
  (cljs-repl (node/repl-env)
             :analyze-path "src"
             :output-dir "out-repl"
             :optimizations :none
             :pretty-print true
             :npm-deps '{$npm}
             :install-deps true
             :target :nodejs
             :source-map true))
(defn start-browser-repl
  []
  (cljs-repl (browser/repl-env)
             :analyze-path "src"
             :output-dir "out-repl"
             :optimizations :none
             :pretty-print true
             :source-map true))
EOF
}

index-release() {
cat <<EOF
<html>
    <body>
        <div id="app"></div>
        <script src="release.js" type="text/javascript" charset="utf-8"></script>
    </body>
</html>
EOF
}

index-dev() {
cat <<EOF
<html>
    <body>
        <div id="app"></div>
        <script src="out/goog/base.js" type="text/javascript" charset="utf-8"></script>
        <script src="out/dev.js" type="text/javascript" charset="utf-8"></script>
        <script type="text/javascript">goog.require("cljs_runner")</script>
    </body>
</html>
EOF
}

browser-runner() {
ns=$(runclj-deps $filepath :ns)
cat <<EOF
(ns cljs-runner
  (:require [$ns :as $ns]))
($ns/-main)
EOF
}

server-runner(){
ns=$(runclj-deps $filepath :ns)
cat <<EOF
(ns cljs-runner
  (:require [$ns :as $ns]
            [cljs.nodejs :as nodejs]))
(nodejs/enable-util-print!)
(defn run [& _]
  (apply $ns/-main (drop 2 (.-argv js/process))))
(set! *main-cli-fn* run)
EOF
}

mkdir -p $root/src

repl > $root/src/repl.clj

if runclj-deps $filepath :browser-mode; then
    index-dev > $root/index.html.dev
    index-release > $root/index.html.release
    browser-runner > $root/src/cljs_runner.cljs
    browser-project > $root/project.clj
else
    dev > $root/dev.js
    server-runner > $root/src/cljs_runner.cljs
    server-project > $root/project.clj
fi

rm -f $root/package*.json
